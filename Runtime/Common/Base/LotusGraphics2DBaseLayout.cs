//=====================================================================================================================
// Проект: LotusPlatform
// Раздел: Общий модуль 2D графики
// Подраздел: Базовая подсистема
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusGraphics2DBaseLayout.cs
*		Расположение 2D элементов в макете.
*		Определение типов данных определяющие макетное расположение элемента - выравнивание и размер элемента в 
*	родительской области, а также модели группирования дочерних элементов в родительской области. Модели группирования 
*	имеют приоритет перед макетным расположением элемента в родительской области.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 27.03.2022
//=====================================================================================================================
using System;
using System.Collections;
using UnityEngine;
using UnityEngine.UI;
//=====================================================================================================================
namespace Lotus
{
	namespace Graphics2D
	{
		//-------------------------------------------------------------------------------------------------------------
		//! \addtogroup Unity2DCommonBase
		/*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Выравнивание элемента в родительской области
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public enum TLayoutAlignment
		{
			/// <summary>
			/// По горизонтали слева, по вертикали сверху
			/// </summary>
			LeftTop,

			/// <summary>
			/// По горизонтали слева, по вертикали по центру
			/// </summary>
			LeftMiddle,

			/// <summary>
			/// По горизонтали слева, по вертикали снизу
			/// </summary>
			LeftBottom,

			/// <summary>
			/// По горизонтали по центру, по вертикали сверху
			/// </summary>
			CenterTop,

			/// <summary>
			/// По горизонтали по центру, по вертикали центру
			/// </summary>
			CenterMiddle,

			/// <summary>
			/// По горизонтали по центру, по вертикали снизу
			/// </summary>
			CenterBottom,

			/// <summary>
			/// По горизонтали справа, по вертикали сверху
			/// </summary>
			RightTop,

			/// <summary>
			/// По горизонтали справа, по вертикали центру
			/// </summary>
			RightMiddle,

			/// <summary>
			/// По горизонтали справа, по вертикали снизу
			/// </summary>
			RightBottom
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Режим изменения размера
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public enum TLayoutSizeMode
		{
			/// <summary>
			/// Размер фиксированный
			/// </summary>
			Fixed,

			/// <summary>
			/// Размер зависит от размера родительской области, и варьируется от минимального до предпочитаемого
			/// </summary>
			Optimal,

			/// <summary>
			/// Размер занимает всю доступную область
			/// </summary>
			Stretch
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Тип группирования элементов
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public enum TLayoutGroupType
		{
			/// <summary>
			/// Горизонтальное размещение
			/// </summary>
			Horizontal,

			/// <summary>
			/// Вертикальное размещение
			/// </summary>
			Vertical,

			/// <summary>
			/// Размещение по сетки
			/// </summary>
			Grid,

			/// <summary>
			/// Плавающие размещение
			/// </summary>
			Flow
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Тип размещения элементов
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public enum TLayoutGroupPlacement
		{
			/// <summary>
			/// Последовательное размещение
			/// </summary>
			Series,

			/// <summary>
			/// Распределенное по размеру родительской области
			/// </summary>
			Distributed,

			/// <summary>
			/// Полностью размещенное по всей родительской области
			/// </summary>
			Expanded
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Вертикальное расположение элементов при горизонтальном выравнивании
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public enum TLayoutGroupVerticalAlign
		{
			/// <summary>
			/// Вертикальное расположение по умолчанию. Такое же как и было у элемента
			/// </summary>
			None,

			/// <summary>
			/// Выравнивание по верхнему краю
			/// </summary>
			Top,

			/// <summary>
			/// Выравнивание по середине
			/// </summary>
			Middle,

			/// <summary>
			/// Выравнивание по нижнему краю
			/// </summary>
			Bottom,

			/// <summary>
			/// Размер занимает всю доступную область
			/// </summary>
			Stretch
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Горизонтальное расположение элементов при вертикальном выравнивании
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public enum TLayoutGroupHorizontalAlign
		{
			/// <summary>
			/// Горизонтальное расположение по умолчанию. Такое же как и было у элемента.
			/// </summary>
			None,

			/// <summary>
			/// Выравнивание по левому краю
			/// </summary>
			Left,

			/// <summary>
			/// Выравнивание по центру
			/// </summary>
			Center,

			/// <summary>
			/// Выравнивание по правому краю
			/// </summary>
			Right,

			/// <summary>
			/// Размер занимает всю доступную область
			/// </summary>
			Stretch
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Определение интерфейса для реализации макетного расположения элемента
		/// </summary>
		/// <remarks>
		/// Макетное расположение определяет размеры и положение дочерних элементов в области родительского элемента.
		/// Собственные установки дочерних элементов игнорируются
		/// </remarks>
		//-------------------------------------------------------------------------------------------------------------
		public interface ILotusLayoutElement : ILotusPlaceable2D
		{
			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Использовать размещение элемента по макету
			/// </summary>
			/// <remarks>
			/// Влияет на выполнимость метода UpdateLayout
			/// </remarks>
			Boolean UseLayout { get; set; }

			/// <summary>
			/// Выравнивание элемента в родительской области
			/// </summary>
			TLayoutAlignment LayoutAlignment { get; set; }

			/// <summary>
			/// Автоматическая привязка прямоугольника трансформации по выравниванию элемента
			/// </summary>
			Boolean AutoAnchor { get; set; }

			/// <summary>
			/// Режим изменения размера по ширине
			/// </summary>
			TLayoutSizeMode LayoutWidthMode { get; set; }

			/// <summary>
			/// Режим изменения размера по высоте
			/// </summary>
			TLayoutSizeMode LayoutHeightMode { get; set; }
			#endregion

			#region ======================================= МЕТОДЫ ====================================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Обновление местоположения и размера по данным макета
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			void UpdateLayout();

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Обновление местоположения и размера по данным макета
			/// </summary>
			/// <param name="margin">Дополнительные внутренние отступы от уровня родительской области</param>
			//---------------------------------------------------------------------------------------------------------
			void UpdateLayout(Vector4 margin);

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Обновление местоположения и размера по данным макета
			/// </summary>
			/// <param name="margin">Дополнительные внутренние отступы от уровня родительской области</param>
			/// <param name="aspect_mode">Режим изменения размеров и соотношения сторон</param>
			//---------------------------------------------------------------------------------------------------------
			void UpdateLayout(Vector4 margin, TAspectMode aspect_mode);

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Установка предпочтительного размера по его текущим размерам
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			void SetPreferredSizeFromSize();

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Установка оптимального размера по его текущим размерам
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			void SetOptimalSizeFromSize();

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение оптимальной ширины
			/// </summary>
			/// <returns>Оптимальная ширина</returns>
			//---------------------------------------------------------------------------------------------------------
			Single GetOptimalWidth();

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение оптимальной высоты
			/// </summary>
			/// <returns>Оптимальная высоты</returns>
			//---------------------------------------------------------------------------------------------------------
			Single GetOptimalHeight();

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Установка минимального размера под содержимое
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			void SetMinimalSize();

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Установка оптимального размера под содержимое
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			void SetOptimalSize();

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Установка предпочтительного размера под содержимое
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			void SetPreferredSize();
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/*@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================