//=====================================================================================================================
// Проект: LotusPlatform
// Раздел: Общий модуль 2D графики
// Подраздел: Подсистема элементов UI
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusGraphics2DCommonItems.cs
*		Определение структур данных и общих типов для списочных элементов пользовательского интерфейса.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 27.03.2022
//=====================================================================================================================
using System;
using System.Collections.Generic;
using System.IO;
using System.Xml;
using UnityEngine;
//=====================================================================================================================
namespace Lotus
{
	namespace Graphics2D
	{
		//-------------------------------------------------------------------------------------------------------------
		//! \addtogroup Unity2DCommonElement
		/*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Режим отображения полосы прокрутки
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public enum TScrollVisibility
		{
			/// <summary>
			/// Всегда показана
			/// </summary>
			Allways,

			/// <summary>
			/// Автоматически, по необходимости показывается/скрывается
			/// </summary>
			Auto,

			/// <summary>
			/// Полоса прокрутки отключена
			/// </summary>
			Disable
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Позиция расположения полосы прокрутки
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public enum TScrollLocation
		{
			/// <summary>
			/// Внутри контейнера
			/// </summary>
			/// <remarks>
			/// Как правила это означает что область контента уменьшается на размер полосы прокрутки
			/// </remarks>
			Inside,

			/// <summary>
			/// Снаружи контейнера
			/// </summary>
			Outside
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Местоположения раскрытия списка элемента ContextMenu
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public enum TContextOpenLocation
		{
			/// <summary>
			/// Вверх
			/// </summary>
			Up,

			/// <summary>
			/// Вниз
			/// </summary>
			Down,

			/// <summary>
			/// Сбоку слева
			/// </summary>
			SideLeft,

			/// <summary>
			/// Сбоку справа
			/// </summary>
			SideRight
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Местоположения раскрытия списка элемента DropDownList
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public enum TDropDownLocation
		{
			/// <summary>
			/// Вверх
			/// </summary>
			Up,

			/// <summary>
			/// Вниз
			/// </summary>
			Down,

			/// <summary>
			/// Сбоку слева
			/// </summary>
			SideLeft,

			/// <summary>
			/// Сбоку справа
			/// </summary>
			SideRight
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Режим закрытия элемента DropDownList
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public enum TDropDownClosedMode
		{
			/// <summary>
			/// По щелчку на элементе
			/// </summary>
			OnClickItem,

			/// <summary>
			/// По нажатию на элементе
			/// </summary>
			OnDownItem,

			/// <summary>
			/// Только по нажатию на заголовке
			/// </summary>
			OnHeader
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Тип данных столбца
		/// </summary>
		/// <remarks>
		/// Тип данных столбца определяет особенности отображения и допустимые операции над ячейками
		/// </remarks>
		//-------------------------------------------------------------------------------------------------------------
		public enum TListColumnType
		{
			/// <summary>
			/// Простой текст
			/// </summary>
			Text,

			/// <summary>
			/// Числовые данные
			/// </summary>
			Number,

			/// <summary>
			/// Изображения
			/// </summary>
			Image,

			/// <summary>
			/// Объект
			/// </summary>
			Object
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Класс представлявший информацию о колонке (столбце) данных
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		[Serializable]
		public class CListColumn
		{
			#region ======================================= ДАННЫЕ ====================================================
			[SerializeField]
			internal String mName;
			[SerializeField]
			internal Single mPercentWidth = 10;
			[SerializeField]
			internal Single mMinWidth = 20;
			[SerializeField]
			internal TListColumnType mDataType;
			[NonSerialized]
			internal Single mActualPercentWidth = 20;
			#endregion

			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Имя столбца
			/// </summary>
			public String Name
			{
				get { return mName; }
				set { mName = value; }
			}

			/// <summary>
			/// Процент ширины столбца
			/// </summary>
			public Single PercentWidth
			{
				get { return mPercentWidth; }
				set { mPercentWidth = value; }
			}

			/// <summary>
			/// Актуальный процент ширины столбца
			/// </summary>
			public Single ActualPercentWidth
			{
				get { return mActualPercentWidth; }
			}

			/// <summary>
			/// Минимальная ширина столбца
			/// </summary>
			public Single MinWidth
			{
				get { return mMinWidth; }
				set { mMinWidth = value; }
			}

			/// <summary>
			/// Тип данных столбца
			/// </summary>
			public TListColumnType DataType
			{
				get { return mDataType; }
				set { mDataType = value; }
			}
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор по умолчанию инициализирует объект класса предустановленными значениями
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public CListColumn()
			{
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="name">Имя столбца</param>
			//---------------------------------------------------------------------------------------------------------
			public CListColumn(String name)
			{
				mName = name;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="percent_width">Ширина столбца в процентах</param>
			/// <param name="min_width">Минимальная ширина</param>
			//---------------------------------------------------------------------------------------------------------
			public CListColumn(Single percent_width, Single min_width)
			{
				mPercentWidth = percent_width;
				mMinWidth = min_width;
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует вектор указанным вектором
			/// </summary>
			/// <param name="name">Имя столбца</param>
			/// <param name="percent_width">Ширина столбца в процентах</param>
			/// <param name="min_width">Минимальная ширина</param>
			//---------------------------------------------------------------------------------------------------------
			public CListColumn(String name, Single percent_width, Single min_width)
			{
				mName = name;
				mPercentWidth = percent_width;
				mMinWidth = min_width;
			}
			#endregion
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Тип строки данных
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public enum TListRowType
		{
			/// <summary>
			/// Обычная строка данных (с точки зрения оформления)
			/// </summary>
			Simple,

			/// <summary>
			/// Альтернативная строка данных (с точки зрения оформления)
			/// </summary>
			Alternative,

			/// <summary>
			/// Строка данных для заголовка
			/// </summary>
			/// <remarks>
			/// Для взаимодействия рисуются методом GUI.Button
			/// </remarks>
			Header,

			/// <summary>
			/// Строка данных для подведения итогов
			/// </summary>
			Results
		}
		//-------------------------------------------------------------------------------------------------------------
		/*@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================