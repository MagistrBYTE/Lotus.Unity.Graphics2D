//=====================================================================================================================
// Проект: LotusPlatform
// Раздел: Общий модуль 2D графики
// Подраздел: Подсистема элементов UI
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusGraphics2DExtendedTiled.cs
*		Определение структур данных и общих типов для тайловых управляющих элементов.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 27.03.2022
//=====================================================================================================================
using System;
using System.Collections.Generic;
using System.IO;
using System.Xml;
//=====================================================================================================================
namespace Lotus
{
	namespace Graphics2D
	{
		//-------------------------------------------------------------------------------------------------------------
		//! \addtogroup Unity2DCommonElement
		/*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Набор действий для выполнения в задачи
		/// </summary>
		/// <remarks>
		/// Данный набор действий будет регулировать что конкретно надо выполнять в задачи.
		/// Пока в основном задачи связанные с анимацией, в дальнейшем добавится и ряд более сложных задач
		/// </remarks>
		//-------------------------------------------------------------------------------------------------------------
		[Flags]
		public enum TTileTaskSet
		{
			/// <summary>
			/// Анимация цвета
			/// </summary>
			Color = 1,

			/// <summary>
			/// Вращение по оси Z
			/// </summary>
			RotationZ = 2,

			/// <summary>
			/// Вращение по оси Y
			/// </summary>
			RotationY = 4,

			/// <summary>
			/// Вращение по оси X
			/// </summary>
			RotationX = 8,

			/// <summary>
			/// Перемещение
			/// </summary>
			Move = 16,

			/// <summary>
			/// Масштаб
			/// </summary>
			Scale = 32,

			/// <summary>
			/// Анимация спрайта
			/// </summary>
			Sprite = 64
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Определение интерфейса для базового тайлового элемента
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public interface ILotusTileElement
		{
			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Слой расположения тайла
			/// </summary>
			Int32 Layer { get; set; }

			/// <summary>
			/// Индекс столбца
			/// </summary>
			Int32 ColumnIndex { get; set; }

			/// <summary>
			/// Индекс строки
			/// </summary>
			Int32 RowIndex { get; set; }

			/// <summary>
			/// Размещение тайла по сетки
			/// </summary>
			/// <remarks>
			/// Тайл может размещаться по сетки или располагаться в свободном месте
			/// </remarks>
			Boolean OnPlacementGrid { get; set; }
			#endregion

			#region ======================================= МЕТОДЫ ====================================================
			#endregion
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Определение интерфейса для хранения параметров ячейки сетки
		/// </summary>
		/// <remarks>
		/// Данный интерфейс описывает дополнительные параметры каждой ячейки сетки
		/// </remarks>
		//-------------------------------------------------------------------------------------------------------------
		public interface ILotusGridTileCell
		{
			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Слой расположения ячейки
			/// </summary>
			Int32 Layer { get; set; }

			/// <summary>
			/// Индекс столбца
			/// </summary>
			Int32 ColumnIndex { get; set; }

			/// <summary>
			/// Индекс строки
			/// </summary>
			Int32 RowIndex { get; set; }

			/// <summary>
			/// Статус пустой ячейки
			/// </summary>
			/// <remarks>
			/// Это абстактоное логическое понятие.
			/// Конкретная логика значения может быть определена соответствующим компонентом
			/// По умолчанию считается что пустая ячейка - это ячейка без тайла
			/// </remarks>
			Boolean IsEmpty { get; set; }

			/// <summary>
			/// Статус наличия у ячейки границы слева
			/// </summary>
			/// <remarks>
			/// При установки значения нужно также корректно устанавливать значения границы смежной ячейки
			/// </remarks>
			Boolean IsBorderLeft { get; set; }

			/// <summary>
			/// Статус наличия у ячейки границы сверху
			/// </summary>
			/// <remarks>
			/// При установки значения нужно также корректно устанавливать значения границы смежной ячейки
			/// </remarks>
			Boolean IsBorderTop { get; set; }

			/// <summary>
			/// Статус наличия у ячейки границы справа
			/// </summary>
			/// <remarks>
			/// При установки значения нужно также корректно устанавливать значения границы смежной ячейки
			/// </remarks>
			Boolean IsBorderRight { get; set; }

			/// <summary>
			/// Статус наличия у ячейки границы снизу
			/// </summary>
			/// <remarks>
			/// При установки значения нужно также корректно устанавливать значения границы смежной ячейки
			/// </remarks>
			Boolean IsBorderBottom { get; set; }
			#endregion

			#region ======================================= МЕТОДЫ ====================================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Установка данных по умолчанию
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			void Reset();
			#endregion
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Класс для хранения параметров ячейки сетки
		/// </summary>
		/// <remarks>
		/// Этот класс описывает дополнительные параметры каждой ячейки сетки
		/// </remarks>
		//-------------------------------------------------------------------------------------------------------------
		public class CGridTileCell : ILotusGridTileCell
		{
			#region ======================================= ДАННЫЕ ====================================================
			internal Int32 mLayer;
			internal Int32 mColumnIndex;
			internal Int32 mRowIndex;
			internal Boolean mIsEmpty;
			internal Boolean mIsBorderLeft;
			internal Boolean mIsBorderTop;
			internal Boolean mIsBorderRight;
			internal Boolean mIsBorderBottom;
			#endregion

			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Слой расположения ячейки
			/// </summary>
			public Int32 Layer
			{
				get { return mLayer; }
				set { mLayer = value; }
			}

			/// <summary>
			/// Индекс столбца
			/// </summary>
			public Int32 ColumnIndex
			{
				get { return mColumnIndex; }
				set
				{
					mColumnIndex = value;
				}
			}

			/// <summary>
			/// Индекс строки
			/// </summary>
			public Int32 RowIndex
			{
				get { return mRowIndex; }
				set
				{
					mRowIndex = value;
				}
			}

			/// <summary>
			/// Статус пустой ячейки
			/// </summary>
			/// <remarks>
			/// Это абстактоное логическое понятие.
			/// Конкретная логика значения может быть определена соответствующим компонентом
			/// По умолчанию считается что пустая ячейка - это ячейка без тайла
			/// </remarks>
			public Boolean IsEmpty
			{
				get { return mIsEmpty; }
				set { mIsEmpty = value; }
			}

			/// <summary>
			/// Статус наличия у ячейки границы слева
			/// </summary>
			/// <remarks>
			/// При установки значения нужно также корректно устанавливать значения границы смежной ячейки
			/// </remarks>
			public Boolean IsBorderLeft
			{
				get { return mIsBorderLeft; }
				set { mIsBorderLeft = value; }
			}

			/// <summary>
			/// Статус наличия у ячейки границы сверху
			/// </summary>
			/// <remarks>
			/// При установки значения нужно также корректно устанавливать значения границы смежной ячейки
			/// </remarks>
			public Boolean IsBorderTop
			{
				get { return mIsBorderTop; }
				set { mIsBorderTop = value; }
			}

			/// <summary>
			/// Статус наличия у ячейки границы справа
			/// </summary>
			/// <remarks>
			/// При установки значения нужно также корректно устанавливать значения границы смежной ячейки
			/// </remarks>
			public Boolean IsBorderRight
			{
				get { return mIsBorderRight; }
				set { mIsBorderRight = value; }
			}

			/// <summary>
			/// Статус наличия у ячейки границы снизу
			/// </summary>
			/// <remarks>
			/// При установки значения нужно также корректно устанавливать значения границы смежной ячейки
			/// </remarks>
			public Boolean IsBorderBottom
			{
				get { return mIsBorderBottom; }
				set { mIsBorderBottom = value; }
			}
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор по умолчанию инициализирует данные объекта предустановленными значениями
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public CGridTileCell()
			{

			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="column_index">Индекс столбца</param>
			/// <param name="row_index">Индекс строки</param>
			/// <param name="layer">Слой расположения</param>
			//---------------------------------------------------------------------------------------------------------
			public CGridTileCell(Int32 column_index, Int32 row_index, Int32 layer = 0)
			{
				mColumnIndex = column_index;
				mRowIndex = row_index;
				mLayer = layer;
			}
			#endregion

			#region ======================================= МЕТОДЫ ====================================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Установка данных по умолчанию
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public virtual void Reset()
			{

			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/*@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================