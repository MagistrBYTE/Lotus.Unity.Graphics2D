//=====================================================================================================================
// Проект: LotusPlatform
// Раздел: Модуль IMGUI Unity
// Подраздел: Компоненты IMGUI Unity
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusGUILabel.cs
*		Компонент представляющий простую надпись подсистемы IMGUI Unity.
*		Реализация компонента представляющего базовый контент: текст с поддержкой локализации и иконку изображения.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 27.03.2022
//=====================================================================================================================
using System;
using System.Collections;
using System.ComponentModel;
using System.Xml;
using UnityEngine;
//---------------------------------------------------------------------------------------------------------------------
using Lotus.Core;
//=====================================================================================================================
namespace Lotus
{
	namespace Graphics2D
	{
		//-------------------------------------------------------------------------------------------------------------
		//! \addtogroup Unity2DImmedateGUIComponent
		/*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Компонент представляющий простую надпись подсистемы IMGUI Unity
		/// </summary>
		/// <remarks>
		/// Реализация компонента представляющего базовый контент: текст с поддержкой локализации и иконку изображения
		/// </remarks>
		//-------------------------------------------------------------------------------------------------------------
		[Serializable]
		[AddComponentMenu(XGUIEditorSettings.MenuPath + "Label")]
		public class LotusGUILabel : LotusGUIElement, ILotusLocalizable
		{
			#region ======================================= МЕТОДЫ СОЗДАНИЯ ЭЛЕМЕНТА ==================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Создание элемента Label
			/// </summary>
			/// <returns>Созданный элемент</returns>
			//---------------------------------------------------------------------------------------------------------
			public new static LotusGUILabel CreateElement()
			{
				// 1) Создание объекта
				GameObject go = new GameObject("GUILabel");
				LotusGUILabel element = go.AddComponent<LotusGUILabel>();

				// 2) Конструктор элемента
				element.OnCreate();

				return element;
			}
			#endregion

			#region ======================================= ДАННЫЕ ====================================================
			// Основные параметры
			[SerializeField]
			internal String mTextLocalize;
			[SerializeField]
			internal Int32 mIDKeyLocalize;
			[SerializeField]
			internal Texture2D mCaptionIcon;

			// Данные в режиме редактора
#if UNITY_EDITOR
			[SerializeField]
			internal Boolean mExpandedLabel;
#endif
			#endregion

			#region ======================================= СВОЙСТВА ==================================================
			//
			// ОСНОВНЫЕ ПАРАМЕТРЫ
			//
			/// <summary>
			/// Основной текст элемента
			/// </summary>
			public String CaptionText
			{
				get { return mTextLocalize; }
				set { mTextLocalize = value; }
			}

			/// <summary>
			/// Текстура иконки элемента
			/// </summary>
			public Texture2D CaptionIcon
			{
				get { return mCaptionIcon; }
				set { mCaptionIcon = value; }
			}
			#endregion

			#region ======================================= СВОЙСТВА ILotusLocalizable ================================
			/// <summary>
			/// Текст для локализации
			/// </summary>
			public String TextLocalize
			{
				get { return mTextLocalize; }
				set { mTextLocalize = value; }
			}

			/// <summary>
			/// Ключ локализации
			/// </summary>
			/// <remarks>
			/// Определяет ключ для текста в подсистеме локализации. Если значение -1 то данный объект не входит в подсистему
			/// локализации. Если ноль то используется поиск на основе порядкового номера(индекса) текста (это линейный поиск
			/// и соответственно это медленно зато не требует никаких дополнительных данных). Значение отличное нуля и -1 
			/// означает что это уникальный ключ в словаре и, следовательно, используется быстрой поиск.По умолчанию 
			/// значение ключа локализации формируется на основании хэш-кода исходного текста
			/// </remarks>
			public Int32 IDKeyLocalize
			{
				get { return mIDKeyLocalize; }
				set { mIDKeyLocalize = value; }
			}

			/// <summary>
			/// Статус локализации текста элемента
			/// </summary>
			public Boolean IsLocalize
			{
				get { return mIDKeyLocalize != -1; }
			}
			#endregion

			#region ======================================= МЕТОДЫ ILotusDataExchange =================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Установка данных
			/// </summary>
			/// <param name="text">Текст</param>
			/// <param name="icon">Иконка изображения</param>
			//---------------------------------------------------------------------------------------------------------
			public override void SetData(String text, Texture2D icon)
			{
				mTextLocalize = text;
				mCaptionIcon = icon;
			}
			#endregion

			#region ======================================= МЕТОДЫ ILotusLocalizable ==================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Установка локализованных данных
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public virtual void SetLocalizableData()
			{
				if (mIDKeyLocalize != 0 && mIDKeyLocalize != -1)
				{
					LotusLocalizationDispatcher.GetTextCurrentFromID(IDKeyLocalize, out mTextLocalize);
				}
				else
				{
					if (mIDKeyLocalize == 0)
					{
						mTextLocalize = LotusLocalizationDispatcher.GetTextCurrentFromTextDefault(mTextLocalize);
					}
				}
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение ключа локализации текста посредством хэш-кода строки
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public void ComputeIDKeyLocalizeFromHash()
			{
				mIDKeyLocalize = mTextLocalize.GetHashCode();
			}
			#endregion

			#region ======================================= ОБЩИЕ МЕТОДЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор элемента
			/// </summary>
			/// <remarks>
			/// Вызывается только в процессе добавления компонента к игровому объекта (метод Reset)
			/// </remarks>
			//---------------------------------------------------------------------------------------------------------
			public override void OnCreate()
			{
				base.OnCreate();
				mStyleMainName = "Label";
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Переустановка/обновление параметров
			/// </summary>
			/// <remarks>
			/// Вызывается центральным диспетчером в момент добавления(регистрации) элемента
			/// </remarks>
			//---------------------------------------------------------------------------------------------------------
			public override void OnReset()
			{
				base.OnReset();
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Рисование элемента
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public override void OnDraw()
			{
				GUI.enabled = IsEnabledElement;
				GUI.depth = mDepth;

				GUI.backgroundColor = mBackgroundColor;

				LotusGUIDispatcher.CurrentContent.text = mTextLocalize;
				LotusGUIDispatcher.CurrentContent.image = mCaptionIcon;
				GUI.Label(mRectWorldScreenMain, LotusGUIDispatcher.CurrentContent, mStyleMain);

				GUI.backgroundColor = Color.white;
			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/*@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================