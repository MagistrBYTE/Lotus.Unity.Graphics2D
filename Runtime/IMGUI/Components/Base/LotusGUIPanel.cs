//=====================================================================================================================
// Проект: LotusPlatform
// Раздел: Модуль IMGUI Unity
// Подраздел: Компоненты IMGUI Unity
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusGUIPanel.cs
*		Компонент представляющий панель для размещения элементов подсистемы IMGUI Unity.
*		Реализация компонента представляющего панель предназначенную для расположения дочерних элементов. Дочерними 
*	элементами считаются все элементы вниз по иерархии игровых объектов.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 27.03.2022
//=====================================================================================================================
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using UnityEngine;
//=====================================================================================================================
namespace Lotus
{
	namespace Graphics2D
	{
		//-------------------------------------------------------------------------------------------------------------
		//! \addtogroup Unity2DImmedateGUIComponent
		/*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Компонент представляющий панель для размещения элементов подсистемы IMGUI Unity
		/// </summary>
		/// <remarks>
		/// Реализация компонента представляющего панель предназначенную для расположения дочерних элементов. 
		/// Дочерними элементами считаются все элементы вниз по иерархии игровых объектов
		/// </remarks>
		//-------------------------------------------------------------------------------------------------------------
		[Serializable]
		[AddComponentMenu(XGUIEditorSettings.MenuPath + "Panel")]
		public class LotusGUIPanel : LotusGUILabel
		{
			#region ======================================= МЕТОДЫ СОЗДАНИЯ ЭЛЕМЕНТА ==================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Создание элемента Panel
			/// </summary>
			/// <returns>Созданный элемент</returns>
			//---------------------------------------------------------------------------------------------------------
			public new static LotusGUIPanel CreateElement()
			{
				// 1) Создание объекта
				GameObject go = new GameObject("GUIPanel");
				LotusGUIPanel element = go.AddComponent<LotusGUIPanel>();

				// 2) Конструктор элемента
				element.OnCreate();

				return element;
			}
			#endregion

			#region ======================================= ДАННЫЕ ====================================================
			#endregion

			#region ======================================= СВОЙСТВА ==================================================
			#endregion

			#region ======================================= МЕТОДЫ ILotusBasePlaceable2D ==============================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Вычисление позиции и размеров элемента по относительным данным
			/// </summary>
			/// <remarks>
			/// На основании относительной позиции элемента считается его абсолютная позиция в экранных координатах
			/// </remarks>
			//---------------------------------------------------------------------------------------------------------
			public override void UpdatePlacement()
			{
				UpdatePlacementBase();

				// Считаем дочерние элементы
				if (mCountChildren > 0)
				{
					LotusGUIDispatcher.FromParentComputePositionElements(this);
				}
			}
			#endregion

			#region ======================================= МЕТОДЫ ILotusElement ======================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Установка элемента в качестве дочернего
			/// </summary>
			/// <remarks>
			/// Метод не следует вызывать напрямую
			/// </remarks>
			/// <param name="child">Дочерний элемент></param>
			//---------------------------------------------------------------------------------------------------------
			public override void SetChildren(ILotusElement child)
			{
				if (child != null)
				{
					child.SetVisibilityFlags(1);
					mCountChildren++;
				}
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Отмена установка элемента в качестве дочернего
			/// </summary>
			/// <remarks>
			/// Метод не следует вызывать напрямую
			/// </remarks>
			/// <param name="child">Дочерний элемент></param>
			//---------------------------------------------------------------------------------------------------------
			public override void UnsetChildren(ILotusElement child)
			{
				if (child != null)
				{
					if (mCountChildren > 0)
					{
						mCountChildren--;
						child.ClearVisibilityFlags(1);
					}
					else
					{
						Debug.LogError("Count children == 0");
					}
				}
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Установка родительского элемента
			/// </summary>
			/// <remarks>
			/// При абсолютной позиции элемент не меняет своего местоположения относительно экрана
			/// </remarks>
			/// <param name="parent">Родительский элемент</param>
			/// <param name="absolute_pos">Абсолютная позиция элемента</param>
			//---------------------------------------------------------------------------------------------------------
			public override void SetParent(ILotusElement parent, Boolean absolute_pos)
			{
				if (parent == null)
				{
					UpdatePlacement();
					mParent.UnsetChildren(this);
					mParent = null;
				}
				else
				{
					if (absolute_pos)
					{

					}
					else
					{
						mParent = parent as LotusGUIElement;
						UpdatePlacement();
						if (mDepth <= mParent.Depth)
						{
							Depth = mParent.Depth + 1;
						}
					}

					mParent.SetChildren(this);
				}
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение области для размещения дочерних элементов
			/// </summary>
			/// <returns>Прямоугольник области для размещения дочерних элементов</returns>
			//---------------------------------------------------------------------------------------------------------
			public override Rect GetChildRectContent()
			{
				return (mRectWorldScreenMain);
			}
			#endregion

			#region ======================================= ОБЩИЕ МЕТОДЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор элемента
			/// </summary>
			/// <remarks>
			/// Вызывается только в процессе добавления компонента к игровому объекта (метод Reset)
			/// </remarks>
			//---------------------------------------------------------------------------------------------------------
			public override void OnCreate()
			{
				base.OnCreate();
				mStyleMainName = "Box";
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Переустановка/обновление параметров
			/// </summary>
			/// <remarks>
			/// Вызывается центральным диспетчером в момент добавления(регистрации) элемента
			/// </remarks>
			//---------------------------------------------------------------------------------------------------------
			public override void OnReset()
			{
				base.OnReset();
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Рисование элемента
			/// </summary>
			//---------------------------------------------------------------------------------------------------------
			public override void OnDraw()
			{
				GUI.enabled = IsEnabledElement;
				GUI.depth = mDepth;

				if (mOpacity < 1)
				{
					GUI.color = new Color(1, 1, 1, mOpacity);
				}
				GUI.backgroundColor = mBackgroundColor;

				LotusGUIDispatcher.CurrentContent.text = mTextLocalize;
				LotusGUIDispatcher.CurrentContent.image = mCaptionIcon;
				GUI.Box(mRectWorldScreenMain, LotusGUIDispatcher.CurrentContent, mStyleMain);

				// Рисуем дочерние элементы
				LotusGUIDispatcher.FromParentDrawElements(this);

				GUI.backgroundColor = Color.white;
				GUI.color = Color.white;
			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/*@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================